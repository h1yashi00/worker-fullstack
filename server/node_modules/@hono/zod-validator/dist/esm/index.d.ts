import type { Context, MiddlewareHandler, Env } from 'hono';
import type { z } from 'zod';
import type { ZodError } from 'zod';
type ValidationTargets = 'json' | 'form' | 'query' | 'queries';
type Hook<T> = (result: {
    success: true;
    data: T;
} | {
    success: false;
    error: ZodError;
}, c: Context) => Response | Promise<Response> | void;
export declare const zValidator: <T extends z.ZodType<any, z.ZodTypeDef, any>, Target extends ValidationTargets, E extends Env, P extends string>(target: Target, schema: T, hook?: Hook<z.TypeOf<T>> | undefined) => MiddlewareHandler<E, P, { [K in Target]: z.TypeOf<T>; }>;
export {};
